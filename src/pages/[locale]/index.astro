---
import { Image } from "astro:assets";
import logoLight from "public/EURALEX_Logo_2026_openbook_nightlight_whitefont.png";

import MainContent from "@/components/main-content.astro";
import { locales } from "@/config/i18n.config";
import PageLayout from "@/layouts/page-layout.astro";
import { createCollectionResource, createSingletonResource } from "@/lib/content/create-resource";
import { getImageImport } from "@/lib/get-image-import";
import { createI18n } from "@/lib/i18n";

export function getStaticPaths() {
	return Promise.all(
		locales.map(async (locale) => {
			const page = await createSingletonResource("indexPage", locale).read();
			const pages = await createCollectionResource("pages", locale).all();
			const callForPapers = pages.find((p) => p.id === "call-for-papers");

			const keynotes = await createCollectionResource("keynotes", locale).all();
			const programme = await createCollectionResource("days", locale).all();

			return { params: { locale }, props: { page, callForPapers, keynotes, programme } };
		}),
	);
}

type StaticPath = Awaited<ReturnType<typeof getStaticPaths>>[number];
type Params = StaticPath["params"];
type Props = StaticPath["props"];

const { locale } = Astro.params as Params;

const { page, callForPapers, keynotes, programme } = Astro.props;

const { t } = await createI18n(locale);

const documentTitle = t("IndexPage.meta.title");
const { hero, content } = page.data;
const hasKeynotes = keynotes.length > 0;
const hasProgramme = programme.length > 0;
const { default: Content } = await page.compile(content);

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
const { title, summary, image } = callForPapers!.data;
---

<PageLayout locale={locale} title={documentTitle}>
	<MainContent>
		<section class="relative place-items-center xs:py-32">
			{
				hero.image ? (
					<Image
						alt=""
						class="absolute inset-0 -z-10 size-full object-cover brightness-75"
						decoding="auto"
						fetchpriority="high"
						loading="eager"
						src={getImageImport(hero.image)}
					/>
				) : null
			}
			<Image
				class="relative z-30 block h-auto w-1/6"
				alt=""
				decoding="auto"
				fetchpriority="high"
				src={logoLight}
			/>
			<div class="relative grid place-items-center gap-y-10 py-20 text-white">
				<h1 class="text-3xl leading-tight xs:text-4xl md:text-5xl lg:text-6xl">{hero.title}</h1>
				<p class="font-extrabold uppercase xs:text-4xl lg:text-6xl xl:text-7xl 2xl:text-8xl">
					{hero.lead}
				</p>
				<p class="text-2xl uppercase xs:text-4xl md:text-5xl">29.9. â€“ 3.10.2026, Vienna</p>
			</div>
		</section>
		<section class="container relative mx-auto grid max-w-screen-lg gap-y-8 px-4 py-12 xs:px-8">
			<div class="prose">
				<Content />
			</div>
		</section>
		<section id="callforpapers" class="relative w-full bg-periwinkle-200 py-12">
			<div
				class="mx-auto grid max-w-screen-lg grid-cols-1 items-center gap-20 gap-y-8 px-4 xs:px-8 md:grid-cols-2"
			>
				{
					image ? (
						<Image
							alt=""
							decoding="auto"
							fetchpriority="high"
							loading="eager"
							src={getImageImport(image)}
							class="h-full rounded-2xl"
						/>
					) : null
				}
				<div>
					<h1 class="text-7xl font-extrabold uppercase leading-tight [word-spacing:50rem]">
						{title}
					</h1>
					<div class="prose font-bold">
						{summary}
					</div>
					<a
						class="mt-6 inline-block rounded-3xl border-2 border-black px-4 py-2 text-center font-semibold text-black"
						href={`/${locale.toString()}/call-for-papers`}
					>
						Learn More
					</a>
				</div>
			</div>
		</section>
		{
			hasKeynotes ? (
				<section class="relative w-full py-12">
					<div class="mx-auto mb-12 flex max-w-screen-lg justify-center px-4 xs:px-8">
						<h1 class="text-center text-7xl font-extrabold uppercase leading-tight [word-spacing:50rem]">
							KEYNOTES
						</h1>
					</div>
					<div class="container mx-auto max-w-screen-lg px-4 xs:px-8">
						<div class="grid grid-cols-1 gap-8 sm:grid-cols-2 md:grid-cols-3">
							{keynotes.map((keynote) => (
								<a
									class="flex flex-col items-center rounded-xl bg-white p-4 shadow transition hover:-translate-y-1 hover:shadow-lg focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-east-bay-600"
									href={`/${locale.toString()}/keynotes#${keynote.id.toString()}`}
								>
									{keynote.data.image.src && (
										<Image
											src={getImageImport(keynote.data.image.src)}
											alt={keynote.data.title}
											class="mb-4 h-48 w-full rounded-lg object-cover"
											decoding="auto"
											loading="lazy"
										/>
									)}
									<h2 class="text-center text-xl font-bold">{keynote.data.title}</h2>
									<p class="mt-2 text-center">{keynote.data.speaker}</p>
								</a>
							))}
						</div>
					</div>
				</section>
			) : null
		}
		{
			hasProgramme ? (
				<section class="relative w-full bg-periwinkle-200 py-12">
					<div class="mx-auto mb-12 flex max-w-screen-lg justify-center px-4 xs:px-8">
						<h1 class="text-center text-7xl font-extrabold uppercase leading-tight [word-spacing:50rem]">
							Programme
						</h1>
					</div>
					<div class="container mx-auto max-w-screen-lg px-4 xs:px-8">
						<div class="grid grid-cols-1 gap-8 sm:grid-cols-2 md:grid-cols-3">
							{programme.map((day) => (
								<a
									class="flex flex-col items-center rounded-xl bg-white p-4 shadow transition hover:-translate-y-1 hover:shadow-lg focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-east-bay-600"
									href={`/${locale.toString()}/programme/${day.id}`}
								>
									{day.data.image.src && (
										<Image
											src={getImageImport(day.data.image.src)}
											alt={day.data.title}
											class="mb-4 h-48 w-full rounded-lg object-cover"
											decoding="auto"
											loading="lazy"
										/>
									)}
									<h2 class="text-center text-xl font-bold">{day.data.title}</h2>
									<p class="mt-2 text-center">{day.data.date}</p>
								</a>
							))}
						</div>
					</div>
				</section>
			) : null
		}
	</MainContent>
</PageLayout>
